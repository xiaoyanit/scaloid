View_mixin() ::= "ConstantsSupport with PressAndHoldable[This]"

View_traitBody() ::= <<
@inline def find[V <: View](id: Int): V = basis.findViewById(id).asInstanceOf[V]

@inline def uniqueId(implicit activity: Activity): Int = {
  if(basis.getId < 0) {
    basis.setId(getUniqueId)
  }
  basis.getId
}
/**
 * Place the widget into a ViewGroup.
 * {{{
 * lazy val blueText = new STextView("Blue")
 * contentView = new SVerticalLayout {
 *   blueText.here textColor Color.BLUE
 * }
 * }}}
 */
@inline def here[LP <: ViewGroupLayoutParams[_, _]]
                    (implicit defaultLayoutParam: This => LP) = {
  val parent = parentViewGroupIfExists
  if(parent != null) parent += basis
  basis
}

/**
 * Place the widget into a ViewGroup, without applying styles.
 * {{{
 * lazy val blueText = new STextView("Blue") textColor Color.BLUE
 * contentView = new SVerticalLayout {
 *   style {
 *     case t: STextView => t textColor Color.RED
 *   }
 *   blueText.hereWithoutStyle
 * }
 * }}}
 */
@inline def hereWithoutStyle[LP <: ViewGroupLayoutParams[_, _]]
                    (implicit defaultLayoutParam: This => LP) = {
  val parent = parentViewGroupIfExists
  if(parent != null) (parent.basis.asInstanceOf[ViewGroup]).addView(basis) // TODO remove asInstanceOf
  basis
}

@deprecated("", "") val FILL_PARENT = ViewGroup.LayoutParams.FILL_PARENT
val MATCH_PARENT = ViewGroup.LayoutParams.MATCH_PARENT
val WRAP_CONTENT = ViewGroup.LayoutParams.WRAP_CONTENT

@inline def fill[LP <: ViewGroupLayoutParams[_,_]](implicit defaultLayoutParam: This => LP) = {
  <<.fill
  basis
}

@inline def wrap[LP <: ViewGroupLayoutParams[_,_]](implicit defaultLayoutParam: This => LP) = {
  <<.wrap
  basis
}

@inline def wf[LP <: ViewGroupLayoutParams[_,_]](implicit defaultLayoutParam: This => LP) = {
  <<.wf
  basis
}

@inline def fw[LP <: ViewGroupLayoutParams[_,_]](implicit defaultLayoutParam: This => LP) = {
  <<.fw
  basis
}

def <<[LP <: ViewGroupLayoutParams[_,_]](implicit defaultLayoutParam: This => LP): LP =
  defaultLayoutParam(basis)

// TODO: Make the return type as Option[TraitViewGroup[_]]
protected def parentViewGroupIfExists[LP <: ViewGroupLayoutParams[_,_]]
    (implicit defaultLayoutParam: This => LP = (v: This)=> null): TraitViewGroup[_] = {
  val lp = defaultLayoutParam(basis)
  if(lp == null) null else lp.parent
}

def <<[LP <: ViewGroupLayoutParams[_,_]](width:Int, height:Int)(implicit defaultLayoutParam: This => LP): LP = {
  val lp = defaultLayoutParam(basis)
  lp.height = height
  lp.width = width
  lp
}

val parentViewGroup: TraitViewGroup[_] = null

@inline def padding_=(p: Int) = {
  basis.setPadding(p, p, p, p)
  basis
}

@inline def padding(p: Int) = padding_=(p)

@inline def padding: Int = 0

@inline def padding(p1: Int, p2: Int, p3: Int, p4: Int) = {
  basis.setPadding(p1, p2, p3, p4)
  basis
}

/**
 * Shortcut for `[[https://developer.android.com/reference/android/view/View.html#setBackground(android.graphics.drawable.Drawable) setBackground(android.graphics.drawable.Drawable)]]`
 */
@inline def background(p: android.graphics.drawable.Drawable) = background_=(p)

/**
 * Shortcut for `[[https://developer.android.com/reference/android/view/View.html#setBackground(android.graphics.drawable.Drawable) setBackground(android.graphics.drawable.Drawable)]]`
 */
@inline def background_=(p: android.graphics.drawable.Drawable) = { basis.setBackgroundDrawable(p); basis } // to avoid compatibility issue on API Level < 16, calls setBackgroundDrawable() although it is deprecated.

>>


ViewGroup_traitBody() ::= <<
implicit val parentVG = this

def applyStyle(v: View): View = {
  var viw = v
  if (parentViewGroup != null) viw = parentViewGroup.applyStyle(viw)
  styles.foreach { st =>
    if (st.isDefinedAt(viw)) viw = st(viw)
  }
  viw
}

def +=(v: View) = {
  var viw = v
  viw = applyStyle(viw)
  basis.addView(viw)
  basis
}

val styles = new ArrayBuffer[View PartialFunction View]

def style(stl: View PartialFunction View) = {
  styles += stl
  basis
}
>>


Menu_traitBody() ::= <<
@inline def +=(txt: CharSequence) = basis.add(txt)

@inline def inflate(id: Int)(implicit activity: Activity) = {
  val inflater = activity.getMenuInflater
  inflater.inflate(id, basis)
  true
}    
>>
